apiVersion: monitoring.elostech.cz/v1alpha1
kind: Thanos
metadata:
  finalizers: []
  name: thanos
spec:

  ### Image
  ###
  #
  # Which image to use for all thanos components.
  # 
  #image:
  #  image: quay.io/thanos/thanos:v0.20.2


  ### Object Store
  ###

  # Directly defined here in CR.
  #
  # Minio:
  objstoreConfig: |-
    type: s3
    config:
      bucket: thanos
      endpoint: minio.erynis-monitoring.svc.cluster.local:9000
      access_key: minio
      secret_key: password123
      insecure: true

  # Azure:
  #objstoreConfig: |-
  #  type: AZURE
  #  config:
  #    storage_account: "..."
  #    storage_account_key: "..."
  #    container: "erynis-azure-blob"
  #    endpoint: "blob.core.windows.net"
  #    max_retries: 0

  # If external secret is used, uncomment this instead of objstoreConfig:
  #existingObjstoreSecret: ${OBJSTORE_SECRET_NAME}


  ### Thanos Components
  ###

  querier:
    # Run on infra nodes:
    #nodeSelector:
    #  node-role.kubernetes.io/infra: ""
    #tolerations:
    #- key: infra
    #  value: reserved
    #  effect: NoSchedule
    #- key: infra
    #  value: reserved
    #  effect: NoExecute
  
    # Run on dedicated "monitoring" nodes:
    #nodeSelector:
    #  node-role.kubernetes.io/monitoring: ""
    #tolerations:
    #- key: "node-role"
    #  operator: "Equal"
    #  value: "monitoring"
    #  effect: "NoSchedule"

    replicaLabel: prometheus_replica
    stores:
      - dnssrv+_grpc._tcp.thanos-receive.${NAMESPACE}.svc.cluster.local
    securityContext:
      enabled: false
      fsGroup: 0
    grpcTLS:
      client:
        secure: false
    openshiftRoute:
      enabled: true
      host: thanos-querier.${APP_DOMAIN}

  querierfrontend:
    enabled: true
    openshiftRoute:
      enabled: true
      httpsEnabled: true
      host: thanos-querier-frontend.${APP_DOMAIN}

    # Run on infra nodes:
    #nodeSelector:
    #  node-role.kubernetes.io/infra: ""
    #tolerations:
    #- key: infra
    #  value: reserved
    #  effect: NoSchedule
    #- key: infra
    #  value: reserved
    #  effect: NoExecute
  
    # Run on dedicated "monitoring" nodes:
    #nodeSelector:
    #  node-role.kubernetes.io/monitoring: ""
    #tolerations:
    #- key: "node-role"
    #  operator: "Equal"
    #  value: "monitoring"
    #  effect: "NoSchedule"

  bucketweb:
    enabled: true

    # Run on infra nodes:
    #nodeSelector:
    #  node-role.kubernetes.io/infra: ""
    #tolerations:
    #- key: infra
    #  value: reserved
    #  effect: NoSchedule
    #- key: infra
    #  value: reserved
    #  effect: NoExecute
  
    # Run on dedicated "monitoring" nodes:
    #nodeSelector:
    #  node-role.kubernetes.io/monitoring: ""
    #tolerations:
    #- key: "node-role"
    #  operator: "Equal"
    #  value: "monitoring"
    #  effect: "NoSchedule"

    securityContext:
      enabled: false
      fsGroup: 0
    openshiftRoute:
      enabled: true
      host: thanos-bucketweb.${APP_DOMAIN}

  compactor:
    enabled: true

    # Resolution and Retention flags
    retentionResolutionRaw: 30d
    retentionResolution5m: 30d
    retentionResolution1h: 5y

    # Minimum age of fresh (non-compacted) blocks
    # before they are being processed
    consistencyDelay: 30m

    # Run on infra nodes:
    #nodeSelector:
    #  node-role.kubernetes.io/infra: ""
    #tolerations:
    #- key: infra
    #  value: reserved
    #  effect: NoSchedule
    #- key: infra
    #  value: reserved
    #  effect: NoExecute
  
    # Run on dedicated "monitoring" nodes:
    #nodeSelector:
    #  node-role.kubernetes.io/monitoring: ""
    #tolerations:
    #- key: "node-role"
    #  operator: "Equal"
    #  value: "monitoring"
    #  effect: "NoSchedule"

    securityContext:
      enabled: false
      fsGroup: 0
    persistence:
      enabled: ${PERSISTENCE_ENABLED}
      size: 20Gi
      storageClass: ${STORAGE_CLASS}

  storegateway:
    enabled: true

    # Run on infra nodes:
    #nodeSelector:
    #  node-role.kubernetes.io/infra: ""
    #tolerations:
    #- key: infra
    #  value: reserved
    #  effect: NoSchedule
    #- key: infra
    #  value: reserved
    #  effect: NoExecute
  
    # Run on dedicated "monitoring" nodes:
    #nodeSelector:
    #  node-role.kubernetes.io/monitoring: ""
    #tolerations:
    #- key: "node-role"
    #  operator: "Equal"
    #  value: "monitoring"
    #  effect: "NoSchedule"

    securityContext:
      enabled: false
      fsGroup: 0
    persistence:
      enabled: ${PERSISTENCE_ENABLED}
      size: 20Gi
      storageClass: ${STORAGE_CLASS}

  ruler:
    enabled: true

    # Run on infra nodes:
    #nodeSelector:
    #  node-role.kubernetes.io/infra: ""
    #tolerations:
    #- key: infra
    #  value: reserved
    #  effect: NoSchedule
    #- key: infra
    #  value: reserved
    #  effect: NoExecute
  
    # Run on dedicated "monitoring" nodes:
    #nodeSelector:
    #  node-role.kubernetes.io/monitoring: ""
    #tolerations:
    #- key: "node-role"
    #  operator: "Equal"
    #  value: "monitoring"
    #  effect: "NoSchedule"

    securityContext:
      enabled: false
      fsGroup: 0
    persistence:
      enabled: ${PERSISTENCE_ENABLED}
      size: 20Gi
      storageClass: ${STORAGE_CLASS}
    alertmanagers:
      - http://alertmanager-main.openshift-monitoring.svc.cluster.local:9094
    config: |-
      groups:
        - name: "metamonitoring"
          rules:
            - alert: "PrometheusDown"
              expr: absent(up{prometheus="openshift-monitoring/k8s",service="prometheus-k8s"})

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

  minio:
    enabled: true
    image:
      registry: docker.io
      repository: bitnami/minio
      tag: 2020.8.13-debian-10-r0
    openshiftRoute:
      enabled: true
      host: thanos-minio.${APP_DOMAIN}
    defaultBuckets: "thanos"
    persistence:
      enabled: ${PERSISTENCE_ENABLED}
      size: 100Gi
      storageClass: ${STORAGE_CLASS}

    # Minio Access Keys
    #
    # Directly in CR:
    accessKey:
      password: "minio"
    secretKey:
      password: "password123"

    # Or stored in existing secret:
    #existingSecret: ${MINIO_SECRET_NAME}

    # Run on infra nodes:
    #nodeSelector:
    #  node-role.kubernetes.io/infra: ""
    #tolerations:
    #- key: infra
    #  value: reserved
    #  effect: NoSchedule
    #- key: infra
    #  value: reserved
    #  effect: NoExecute
  
    # Run on dedicated "monitoring" nodes:
    #nodeSelector:
    #  node-role.kubernetes.io/monitoring: ""
    #tolerations:
    #- key: "node-role"
    #  operator: "Equal"
    #  value: "monitoring"
    #  effect: "NoSchedule"

